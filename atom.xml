<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>秘密基地</title>
  
  
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2021-02-22T08:09:24.962Z</updated>
  <id>http://example.com/</id>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>gcc 生成静态库和动态库</title>
    <link href="http://example.com/2021/02/22/gcc-%E7%94%9F%E6%88%90%E9%9D%99%E6%80%81%E5%BA%93%E5%92%8C%E5%8A%A8%E6%80%81%E5%BA%93/"/>
    <id>http://example.com/2021/02/22/gcc-%E7%94%9F%E6%88%90%E9%9D%99%E6%80%81%E5%BA%93%E5%92%8C%E5%8A%A8%E6%80%81%E5%BA%93/</id>
    <published>2021-02-22T06:30:50.000Z</published>
    <updated>2021-02-22T08:09:24.962Z</updated>
    
    <content type="html"><![CDATA[<h3 id="生成静态库-a"><a href="#生成静态库-a" class="headerlink" title="生成静态库 (.a)"></a>生成静态库 (.a)</h3><blockquote><p>比如要基于 ioutils.c 生成一个静态库</p></blockquote><ul><li>ioutils.h</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> _IO_UTILS_H_</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> _IO_UTILS_H_</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">printString</span><span class="params">(<span class="keyword">char</span> *str)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span> <span class="comment">/* _IO_UTILS_H_ */</span></span></span><br></pre></td></tr></table></figure><ul><li>ioutils.c</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;ioutils.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">printString</span><span class="params">(<span class="keyword">char</span> *str)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%s\n&quot;</span>, str);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>main.c</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;ioutils.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">char</span> *content = <span class="string">&quot;hello, world&quot;</span>;</span><br><span class="line">    printString(content);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>执行命令生成 ioutils.o 文件, 然后通过 ar 命令创建静态库文件(.a)</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">gcc -c ioutils.c</span><br><span class="line">ar -rsc  libioutils.a ioutils.o</span><br></pre></td></tr></table></figure><blockquote><p>在编译程序时使用 libioutils.a 库, <code>-L.</code> 添加当前目录到库搜索目录, <code>-lioutils</code> 使用 libioutils.a 库，不需要写 ‘lib’ 和 ‘.a’ 后缀</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gcc -o main -L. -lioutils main.c</span><br></pre></td></tr></table></figure><ul><li>编译成功后运行程序</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">./main</span><br><span class="line">hello, world    <span class="comment"># 输出</span></span><br></pre></td></tr></table></figure><hr><h3 id="生成动态库-so"><a href="#生成动态库-so" class="headerlink" title="生成动态库 (.so)"></a>生成动态库 (.so)</h3><blockquote><p>还是上面提到的 ioutils.c 文件，这次把它编译成一个动态库文件 <code>libioutils.so</code></p></blockquote><ul><li>执行命令</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gcc -fPIC -shared -o libioutils.so ioutils.c</span><br></pre></td></tr></table></figure><blockquote><p>如果需要使用动态库 mina.c 文件需要改动一下</p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;dlfcn.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">char</span> *content = <span class="string">&quot;hello, world&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 加载动态库文件，最好使用绝对路径</span></span><br><span class="line">    <span class="keyword">void</span> *mylib = dlopen(<span class="string">&quot;./libioutils.so&quot;</span>, RTLD_LAZY);</span><br><span class="line">    <span class="keyword">if</span> (!mylib) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%s\n&quot;</span>, dlerror());</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获取函数位置</span></span><br><span class="line">    <span class="keyword">void</span> *symbol = dlsym(mylib, <span class="string">&quot;printString&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span> (!symbol) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%s\n&quot;</span>, dlerror());</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">void</span> (*mylib_printString)(<span class="keyword">char</span> *str) = symbol;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 调用 ioutils printString 函数</span></span><br><span class="line">    mylib_printString(content);</span><br><span class="line"></span><br><span class="line">    dlclose(mylib);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>编译并运行 main.c 文件</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">gcc -o main main.c &amp;&amp; ./main</span><br><span class="line">hello, world    <span class="comment"># 输出</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;生成静态库-a&quot;&gt;&lt;a href=&quot;#生成静态库-a&quot; class=&quot;headerlink&quot; title=&quot;生成静态库 (.a)&quot;&gt;&lt;/a&gt;生成静态库 (.a)&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;比如要基于 ioutils.c 生成一个静态库&lt;/p&gt;
&lt;/b</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>gcc 简单使用方法</title>
    <link href="http://example.com/2021/02/07/gcc-%E7%AE%80%E5%8D%95%E4%BD%BF%E7%94%A8%E6%96%B9%E6%B3%95/"/>
    <id>http://example.com/2021/02/07/gcc-%E7%AE%80%E5%8D%95%E4%BD%BF%E7%94%A8%E6%96%B9%E6%B3%95/</id>
    <published>2021-02-07T06:15:08.000Z</published>
    <updated>2021-02-22T06:33:21.740Z</updated>
    
    <content type="html"><![CDATA[<h3 id="gcc-常用参数"><a href="#gcc-常用参数" class="headerlink" title="gcc 常用参数"></a>gcc 常用参数</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">-I &lt;dir&gt;    # 添加头文件 (include) 搜索路径</span><br><span class="line">-L &lt;dir&gt;    # 添加库 (library) 搜索路径</span><br><span class="line">-E          # Only run the preprocessor</span><br><span class="line">-S          # Only run preprocess and compilation steps</span><br><span class="line">-c          # Only run preprocess, compile, and assemble steps</span><br><span class="line">-o &lt;file&gt;.  # Write output to &lt;file&gt;</span><br></pre></td></tr></table></figure><h3 id="使用-gcc-输出预编译内容"><a href="#使用-gcc-输出预编译内容" class="headerlink" title="使用 gcc 输出预编译内容"></a>使用 gcc 输出预编译内容</h3><ul><li>main.c 内容如下</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Hello, world&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>使用 <code>gcc -E main.c</code> 命令输出预编译处理的信息，以 mac 系统为例输出信息如下</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">gcc -E main.c</span><br><span class="line"></span><br><span class="line"># 1 &quot;main.c&quot;</span><br><span class="line"># 1 &quot;&lt;built-in&gt;&quot; 1</span><br><span class="line"># 1 &quot;&lt;built-in&gt;&quot; 3</span><br><span class="line"># 366 &quot;&lt;built-in&gt;&quot; 3</span><br><span class="line"># 1 &quot;&lt;command line&gt;&quot; 1</span><br><span class="line"># 1 &quot;&lt;built-in&gt;&quot; 2</span><br><span class="line"># 1 &quot;main.c&quot; 2</span><br><span class="line"># 1 &quot;&#x2F;Library&#x2F;Developer&#x2F;CommandLineTools&#x2F;SDKs&#x2F;MacOSX.sdk&#x2F;usr&#x2F;include&#x2F;stdio.h&quot; 1 3 4</span><br><span class="line"># 64 &quot;&#x2F;Library&#x2F;Developer&#x2F;CommandLineTools&#x2F;SDKs&#x2F;MacOSX.sdk&#x2F;usr&#x2F;include&#x2F;stdio.h&quot; 3 4</span><br><span class="line"># 1 &quot;&#x2F;Library&#x2F;Developer&#x2F;CommandLineTools&#x2F;SDKs&#x2F;MacOSX.sdk&#x2F;usr&#x2F;include&#x2F;_stdio.h&quot; 1 3 4</span><br><span class="line">......</span><br><span class="line">extern int __vsnprintf_chk (char * restrict, size_t, int, size_t,</span><br><span class="line">       const char * restrict, va_list);</span><br><span class="line"># 408 &quot;&#x2F;Library&#x2F;Developer&#x2F;CommandLineTools&#x2F;SDKs&#x2F;MacOSX.sdk&#x2F;usr&#x2F;include&#x2F;stdio.h&quot; 2 3 4</span><br><span class="line"># 2 &quot;main.c&quot; 2</span><br><span class="line"></span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">    printf(&quot;Hello, world&quot;);</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="使用-gcc-将-c-代码转换成汇编语言文件"><a href="#使用-gcc-将-c-代码转换成汇编语言文件" class="headerlink" title="使用 gcc 将 c 代码转换成汇编语言文件"></a>使用 gcc 将 c 代码转换成汇编语言文件</h3><ul><li>执行命令 <code>gcc -S main.c</code> 会生成一个叫 <code>main.s</code> 的文件，里面内容是汇编语言</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">.section__TEXT,__text,regular,pure_instructions</span><br><span class="line">.build_version macos, 11, 0sdk_version 11, 0</span><br><span class="line">.globl_main                   ## -- Begin function main</span><br><span class="line">.p2align4, 0x90</span><br><span class="line">_main:                                  ## @main</span><br><span class="line">.cfi_startproc</span><br><span class="line">## %bb.0:</span><br><span class="line">pushq%rbp</span><br><span class="line">.cfi_def_cfa_offset 16</span><br><span class="line">.cfi_offset %rbp, -16</span><br><span class="line">movq%rsp, %rbp</span><br><span class="line">.cfi_def_cfa_register %rbp</span><br><span class="line">subq$16, %rsp</span><br><span class="line">movl$0, -4(%rbp)</span><br><span class="line">leaqL_.str(%rip), %rdi</span><br><span class="line">movb$0, %al</span><br><span class="line">callq_printf</span><br><span class="line">xorl%ecx, %ecx</span><br><span class="line">movl%eax, -8(%rbp)          ## 4-byte Spill</span><br><span class="line">movl%ecx, %eax</span><br><span class="line">addq$16, %rsp</span><br><span class="line">popq%rbp</span><br><span class="line">retq</span><br><span class="line">.cfi_endproc</span><br><span class="line">                                        ## -- End function</span><br><span class="line">.section__TEXT,__cstring,cstring_literals</span><br><span class="line">L_.str:                                 ## @.str</span><br><span class="line">.asciz&quot;Hello, world&quot;</span><br><span class="line"></span><br><span class="line">.subsections_via_symbols</span><br></pre></td></tr></table></figure><h3 id="生成目标文件-object-file"><a href="#生成目标文件-object-file" class="headerlink" title="生成目标文件 (object file)"></a>生成目标文件 (object file)</h3><ul><li>方法一: 使用 gcc 来生成</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gcc -c main.c</span><br></pre></td></tr></table></figure><ul><li>方法二: 使用 as 命令通过汇编过的文件(.s)来生成</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">as main.s -o main.o</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;gcc-常用参数&quot;&gt;&lt;a href=&quot;#gcc-常用参数&quot; class=&quot;headerlink&quot; title=&quot;gcc 常用参数&quot;&gt;&lt;/a&gt;gcc 常用参数&lt;/h3&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td cl</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Docker Compose</title>
    <link href="http://example.com/2019/08/01/Docker-Compose/"/>
    <id>http://example.com/2019/08/01/Docker-Compose/</id>
    <published>2019-08-01T08:58:58.000Z</published>
    <updated>2021-02-07T03:43:10.406Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Docker-Compose-简介"><a href="#Docker-Compose-简介" class="headerlink" title="Docker Compose 简介"></a>Docker Compose 简介</h3><p>Compose 是用于定义和运行多容器 Docker 应用程序的工具。使用 Compose，可以使用YAML文件来配置应用程序的服务。然后，使用一个命令，从配置文件创建并启动所有服务。</p><hr><h3 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h3><table><thead><tr><th align="center">命令</th><th align="center">简介</th></tr></thead><tbody><tr><td align="center">docker-compose up</td><td align="center">创建、启动容器</td></tr><tr><td align="center">docker-compose down</td><td align="center">停止并删除容器</td></tr><tr><td align="center">docker-compose start</td><td align="center">启动容器</td></tr><tr><td align="center">docker-compose stop</td><td align="center">停止容器</td></tr><tr><td align="center">docker-compose ps</td><td align="center">查看容器状态</td></tr><tr><td align="center">docker-compose kill</td><td align="center">kill 掉运行的容器</td></tr></tbody></table><hr><h3 id="Compose-file"><a href="#Compose-file" class="headerlink" title="Compose file"></a>Compose file</h3><ul><li>默认是名字为<code>docker-compose.yml</code>的文件</li><li>如果是自定义的配置文件<code>myapp-compose.yml</code>，使用时需要用<code>-f</code>参数指定文件</li></ul><h4 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h4><ul><li><p>这个服务要使用 Python 环境，同时程序需要依赖 Redis，配置文件可以这么写：</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">version: <span class="string">&#x27;3&#x27;</span></span><br><span class="line">services:</span><br><span class="line">  web:</span><br><span class="line">    image: python:<span class="number">3.7</span>.<span class="number">4</span></span><br><span class="line">    ports:</span><br><span class="line">      - <span class="string">&quot;8080:5001&quot;</span></span><br><span class="line">    depends_on:</span><br><span class="line">      - redis</span><br><span class="line">  redis:</span><br><span class="line">    image: <span class="string">&quot;redis:alpine&quot;</span></span><br></pre></td></tr></table></figure><table><thead><tr><th align="center">指令</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">version</td><td align="center">使用compose配置文件的版本</td></tr><tr><td align="center">services</td><td align="center">配置的服务</td></tr><tr><td align="center">web/redis</td><td align="center">服务名称(自定义)</td></tr><tr><td align="center">image</td><td align="center">启动容器使用的镜像</td></tr><tr><td align="center">ports</td><td align="center">服务映射的端口</td></tr><tr><td align="center">depends_on</td><td align="center">服务所依赖的其他服务</td></tr></tbody></table></li><li><p>更多指令可以参考 <a href="https://docs.docker.com/compose/compose-file/"><em>官方文档</em></a></p></li></ul><hr><h3 id="通过-Docker-Compose-运行容器"><a href="#通过-Docker-Compose-运行容器" class="headerlink" title="通过 Docker Compose 运行容器"></a>通过 Docker Compose 运行容器</h3><ul><li>创建并启动容器(<code>-d</code>参数为后台模式)</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ docker-compose up -d</span><br><span class="line">Creating docker-compose_web_1 ... <span class="keyword">done</span></span><br><span class="line">Creating docker-compose_redis_1 ... <span class="keyword">done</span></span><br><span class="line">...</span><br></pre></td></tr></table></figure><ul><li>查看状态</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ docker-compose ps</span><br><span class="line">          Name              Command         State        Ports</span><br><span class="line">-------------------------------------------------------------------------</span><br><span class="line">docker-compose_web_1        ...              UP   0.0.0.0:8080-&gt;5001/tcp</span><br><span class="line">docker-compose_redis_1      ...              UP</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;Docker-Compose-简介&quot;&gt;&lt;a href=&quot;#Docker-Compose-简介&quot; class=&quot;headerlink&quot; title=&quot;Docker Compose 简介&quot;&gt;&lt;/a&gt;Docker Compose 简介&lt;/h3&gt;&lt;p&gt;Compose 是用</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Docker 拾遗++</title>
    <link href="http://example.com/2019/07/31/Docker-%E6%8B%BE%E9%81%97/"/>
    <id>http://example.com/2019/07/31/Docker-%E6%8B%BE%E9%81%97/</id>
    <published>2019-07-31T07:36:32.000Z</published>
    <updated>2021-02-07T03:43:10.407Z</updated>
    
    <content type="html"><![CDATA[<h3 id="回-废-忆-话-篇"><a href="#回-废-忆-话-篇" class="headerlink" title="回(废)忆(话)篇"></a>回(废)忆(话)篇</h3><p>大概是2015年的夏天，在早上蹲坑时偶然看到一篇介绍Docker的文章，当时大部分公司业务可能还在使用虚拟机(VM)，对容器技术的使用应该不是很广泛。本着好奇心我就趁业余时间去研究Docker，但是初期介绍的Docekr技术的文章不是很多，书也就那几本（和没有差不多，都不是很详细），然后慢慢研究发现这东西和虚拟机不太一样，说的通俗点Docker做的只是容器化的管理部分，实现部分还是<code>Linux</code>内核本身的<code>CGroup</code>在起作用（大概就是类似沙箱的进程隔离）每个容器都有自己的资源体系，容器内部会以为自己就是全世界～。之后并没有真正的在生产环境中使用过Docker技术，时隔多年因为工作业务需要使用到容器技术，所以开启了漫漫的回忆之路。俗话说：好记性不如烂笔(键)头(盘)，这次我要记下来方便之后查阅～</p><h2 id="进入正题"><a href="#进入正题" class="headerlink" title="进入正题"></a>进入正题</h2><h4 id="Docker中的基本概念"><a href="#Docker中的基本概念" class="headerlink" title="Docker中的基本概念"></a>Docker中的基本概念</h4><ul><li>镜像(image)<br>  镜像可以在官方的镜像库获取，也可以通过 Dockerfile 生成。可以理解为一个用于启动容器的基础模版，基于镜像启动的容器会拥有这个镜像提供的基本的功能、配置和环境。</li><li>容器(container)<br>  容器就是具体的执行体，通过内置或者外部传入的程序、命令或者参数来执行具体的任务。不同容器之间是相互隔离的，比如：同时开启了A、B两个容器，A容器是无法干预B容器内部任务的。每个容器内部有类似于沙箱(sandbox)单独的系统资源。</li></ul><p><strong>常用命令介绍，详细使用和更多命令可以参考</strong> <a href="https://docs.docker.com/reference"><em>官方文档</em></a></p><table><thead><tr><th align="center">命令</th><th align="center">简介</th></tr></thead><tbody><tr><td align="center">docekr pull</td><td align="center">用于获取 <a href="https://hub.docker.com/"><em>DockerHub</em></a> 或者其他来源的镜像</td></tr><tr><td align="center">docker images</td><td align="center">查看已下载的镜像列表</td></tr><tr><td align="center">docker build</td><td align="center">从 <em>Dockerfile</em> 构建一个镜像</td></tr><tr><td align="center">docker run</td><td align="center">从一个 <em>镜像(image)</em> 运行一个新的 <em>容器(container)</em></td></tr><tr><td align="center">docker exec</td><td align="center">在一个已经运行的容器中执行命令</td></tr><tr><td align="center">docker ps -a</td><td align="center">查看当前容器列表</td></tr><tr><td align="center">docker start</td><td align="center">启动一个容器</td></tr><tr><td align="center">docker stop</td><td align="center">关闭一个容器</td></tr><tr><td align="center">docker kill</td><td align="center">杀死一个或者多个已经运行的容器</td></tr><tr><td align="center">docker rm</td><td align="center">删除一个或者多个容器</td></tr><tr><td align="center">docker rmi</td><td align="center">删除一个或者多个镜像(image)</td></tr></tbody></table><h4 id="Dockerfile-指令简介"><a href="#Dockerfile-指令简介" class="headerlink" title="Dockerfile 指令简介"></a>Dockerfile 指令简介</h4><p><em>注意:</em> Dockerfile文件内需要用引号的地方只能是双引号(“”)，单引号(‘’)会出现问题或者指令异常</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"># 用来指定从哪个镜像的基础上开始创建新的镜像</span><br><span class="line">FROM &lt;images&gt;</span><br><span class="line"></span><br><span class="line"># 设置镜像作者</span><br><span class="line">MAINTAINER &lt;author&gt; </span><br><span class="line"></span><br><span class="line"># 构建容器时需要执行的命令  </span><br><span class="line">RUN &lt;command&gt;</span><br><span class="line"></span><br><span class="line"># 复制文件指令</span><br><span class="line">COPY &lt;source&gt; &lt;destinaion&gt;</span><br><span class="line"></span><br><span class="line"># 指定容器运行时监听的端口</span><br><span class="line">EXPOSE &lt;port&gt;</span><br><span class="line"></span><br><span class="line"># 设置 ENV 环境变量</span><br><span class="line">ENV &lt;key&gt;&#x3D;&lt;value&gt;</span><br><span class="line"></span><br><span class="line"># 配置容器一个可执行的命令, 这个指令只能有一个, 如果有多个只有最后一个生效</span><br><span class="line">ENTRYPOINT [&quot;command&quot;, &quot;param1&quot;, &quot;param2&quot;]</span><br><span class="line"></span><br><span class="line"># 容器默认的执行命令, 这个指令只能有一个, 多个只有最后一个生效</span><br><span class="line">CMD [&quot;command&quot;, &quot;param1&quot;, &quot;param2&quot;]</span><br><span class="line"></span><br><span class="line"># 指定RUN、CMD与ENTRYPOINT命令的工作目录</span><br><span class="line">WORKDIR &#x2F;path&#x2F;to&#x2F;workdir </span><br><span class="line"></span><br><span class="line"># 镜像正在运行时设置一个UID </span><br><span class="line">USER &lt;UID&gt;  </span><br><span class="line"></span><br><span class="line"># 授权访问从容器内到主机上的目录</span><br><span class="line">VOLUME [&quot;&#x2F;data&quot;]             </span><br></pre></td></tr></table></figure><h4 id="使用-Dockerfile-构建镜像"><a href="#使用-Dockerfile-构建镜像" class="headerlink" title="使用 Dockerfile 构建镜像"></a>使用 Dockerfile 构建镜像</h4><ul><li>Dockerfile 同级目录文件列表</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">├── Dockerfile</span><br><span class="line">├── myapp.py</span><br><span class="line">└── requirements.txt</span><br><span class="line">    </span><br><span class="line">0 directories, 3 files</span><br></pre></td></tr></table></figure><ul><li>Dockerfile:</li></ul><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">FROM</span> python:<span class="number">3.7</span>.<span class="number">4</span></span><br><span class="line">    </span><br><span class="line"><span class="keyword">WORKDIR</span><span class="bash"> /root/mywebproject</span></span><br><span class="line"><span class="keyword">COPY</span><span class="bash"> requirements.txt requirements.txt</span></span><br><span class="line"><span class="keyword">COPY</span><span class="bash"> myapp.py myapp.py</span></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> chmod +x  /root/mywebproject/myapp.py</span></span><br><span class="line">    </span><br><span class="line"><span class="keyword">ENV</span> FLASK_APP=myapp.py</span><br><span class="line">    </span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> pip install -r requirements.txt</span></span><br><span class="line"><span class="keyword">ENTRYPOINT</span><span class="bash"> [<span class="string">&quot;flask&quot;</span>]</span></span><br><span class="line"><span class="keyword">CMD</span><span class="bash"> [<span class="string">&quot;run&quot;</span>]</span></span><br></pre></td></tr></table></figure><ul><li>myapp.py（Flask 官方 Helloworld）</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask</span><br><span class="line">app = Flask(__name__)</span><br><span class="line">    </span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/&#x27;</span></span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">hello_world</span>():</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;Hello, World!&#x27;</span></span><br></pre></td></tr></table></figure><ul><li>通过 <code>docker build</code> 命令基于 Dockerfile 构建自定义的镜像</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -t 给镜像起个名字, 后面的点 (&quot;.&quot;) 必不可少</span></span><br><span class="line">$ docker build -t myflaskapp .</span><br></pre></td></tr></table></figure><ul><li>列出镜像</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ docker images</span><br><span class="line">    </span><br><span class="line">REPOSITORY      TAG          IMAGE ID          CREATED          SIZE</span><br><span class="line">myflaskapp      latest       2fe45c45bb6b      1 minutes ago    1.1GB</span><br><span class="line">python          3.7.4        42d620af35be      2 weeks ago      918MB</span><br></pre></td></tr></table></figure><ul><li>从镜像启动一个新的容器</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -it 参数可以启用交互环境功能, 如果想使用后台模式可以用 -d 参数</span></span><br><span class="line"><span class="comment"># 在创建镜像时Dockerfile里面已经指定命令了(ENTRYPOINT、CMD)所以run的时候就可以不指定命令</span></span><br><span class="line">$ docker run -it myflaskapp</span><br></pre></td></tr></table></figure><ul><li>进入容器内部</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -it 参数可以启用交互环境功能</span></span><br><span class="line">$ docker <span class="built_in">exec</span> -it &lt;container-id&gt; bash</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;回-废-忆-话-篇&quot;&gt;&lt;a href=&quot;#回-废-忆-话-篇&quot; class=&quot;headerlink&quot; title=&quot;回(废)忆(话)篇&quot;&gt;&lt;/a&gt;回(废)忆(话)篇&lt;/h3&gt;&lt;p&gt;大概是2015年的夏天，在早上蹲坑时偶然看到一篇介绍Docker的文章，当时大部分公</summary>
      
    
    
    
    
    <category term="docker" scheme="http://example.com/tags/docker/"/>
    
  </entry>
  
  <entry>
    <title>打造漂亮又好用的 vim 编辑器</title>
    <link href="http://example.com/2019/04/19/%E6%89%93%E9%80%A0%E6%BC%82%E4%BA%AE%E7%9A%84-vim-%E7%BC%96%E8%BE%91%E5%99%A8/"/>
    <id>http://example.com/2019/04/19/%E6%89%93%E9%80%A0%E6%BC%82%E4%BA%AE%E7%9A%84-vim-%E7%BC%96%E8%BE%91%E5%99%A8/</id>
    <published>2019-04-19T06:51:00.000Z</published>
    <updated>2021-02-07T03:43:10.410Z</updated>
    
    <content type="html"><![CDATA[<p>安装一些插件使 vim 更好用</p><table><thead><tr><th>名称</th><th>描述</th></tr></thead><tbody><tr><td>pathogen.vim</td><td>自动加载<code>～/.vim/bundle</code>下的插件</td></tr><tr><td>supertab</td><td>全局字符<code>tab</code>补全</td></tr><tr><td>jedi-vim</td><td>Python 语法补全插件</td></tr><tr><td>lightline.vim</td><td>下方状态栏显示插件</td></tr><tr><td>nerdtree</td><td>侧边栏目录显示插件</td></tr><tr><td>vim-gitgutter</td><td>Git文件状态显示插件</td></tr><tr><td>vim-multiple-cursors</td><td>多行编辑插件(like sublime)</td></tr><tr><td>duoduo.vim</td><td>颜色主题</td></tr><tr><td>snazzy.vim</td><td>颜色主题</td></tr></tbody></table><p>安装插件后编辑<code>~/.vimrc</code>文件加入以下内容:</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">syntax</span> <span class="keyword">on</span></span><br><span class="line"><span class="keyword">set</span> tabstop:<span class="number">4</span></span><br><span class="line"><span class="keyword">set</span> expandtab</span><br><span class="line"><span class="keyword">set</span> <span class="keyword">number</span></span><br><span class="line"><span class="keyword">set</span> hlsearch</span><br><span class="line"><span class="keyword">colorscheme</span> duoduo</span><br><span class="line"></span><br><span class="line"><span class="comment">&quot; pathogen</span></span><br><span class="line"><span class="keyword">execute</span> pathogen#infect()</span><br><span class="line"><span class="keyword">filetype</span> plugin <span class="built_in">indent</span> <span class="keyword">on</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&quot; jedi-vim</span></span><br><span class="line"><span class="keyword">autocmd</span> FileType <span class="keyword">python</span> <span class="keyword">setlocal</span> completeopt-=preview</span><br><span class="line"></span><br><span class="line"><span class="comment">&quot; nerdtree</span></span><br><span class="line"><span class="keyword">map</span> <span class="symbol">&lt;C-n&gt;</span> :NERDTreeToggle<span class="symbol">&lt;CR&gt;</span></span><br><span class="line"><span class="keyword">autocmd</span> StdinReadPre * <span class="keyword">let</span> <span class="variable">s:std_in</span>=<span class="number">1</span></span><br><span class="line"><span class="keyword">autocmd</span> VimEnter * <span class="keyword">if</span> <span class="built_in">argc</span>() == <span class="number">1</span> &amp;&amp; <span class="built_in">isdirectory</span>(<span class="built_in">argv</span>()[<span class="number">0</span>]) &amp;&amp; !exists(<span class="string">&quot;s:std_in&quot;</span>) | <span class="keyword">exe</span> <span class="string">&#x27;NERDTree&#x27;</span> <span class="built_in">argv</span>()[<span class="number">0</span>] | <span class="keyword">wincmd</span> <span class="keyword">p</span> | <span class="keyword">ene</span> | <span class="keyword">exe</span> <span class="string">&#x27;cd &#x27;</span>.<span class="built_in">argv</span>()[<span class="number">0</span>] | <span class="keyword">endif</span></span><br><span class="line"><span class="string">&quot; autocmd bufenter * if (winnr(&quot;</span>$<span class="string">&quot;) == 1 &amp;&amp; exists(&quot;</span><span class="variable">b:NERDTree</span><span class="comment">&quot;) &amp;&amp; b:NERDTree.isTabTree()) | q | endif</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&quot; supertab</span></span><br><span class="line"><span class="keyword">let</span> <span class="variable">g:SuperTabDefaultCompletionType</span> = <span class="string">&quot;&lt;c-n&gt;&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">autocmd</span> FileType html <span class="keyword">setlocal</span> <span class="keyword">ts</span>=<span class="number">2</span> <span class="keyword">sts</span>=<span class="number">2</span> <span class="keyword">sw</span>=<span class="number">2</span></span><br><span class="line"><span class="keyword">autocmd</span> FileType <span class="keyword">ruby</span> <span class="keyword">setlocal</span> <span class="keyword">ts</span>=<span class="number">2</span> <span class="keyword">sts</span>=<span class="number">2</span> <span class="keyword">sw</span>=<span class="number">2</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;安装一些插件使 vim 更好用&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名称&lt;/th&gt;
&lt;th&gt;描述&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td&gt;pathogen.vim&lt;/td&gt;
&lt;td&gt;自动加载&lt;code&gt;～/.vim/bu</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>XEN 常用命令</title>
    <link href="http://example.com/2018/07/18/XEN-%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/"/>
    <id>http://example.com/2018/07/18/XEN-%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</id>
    <published>2018-07-18T02:47:39.000Z</published>
    <updated>2021-02-07T03:43:10.408Z</updated>
    
    <content type="html"><![CDATA[<p>创建新的本地存储</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">$ xe host-list  // 查看 host uuid 一会用到</span><br><span class="line">uuid ( RO)                : 897d67fc-a6ad-4fed-9e54-39d0c801769e</span><br><span class="line">name-label ( RW): xenserver-02</span><br><span class="line">name-description ( RW): Default install</span><br><span class="line"></span><br><span class="line">// 创建 sr </span><br><span class="line">$ xe sr-create content-type=LVM device-config:device=/dev/sdb \</span><br><span class="line">host-uuid=897d67fc-a6ad-4fed-9e54-39d0c801769e \</span><br><span class="line">name-label=<span class="string">&quot;LocalStorage 2&quot;</span> shared=<span class="literal">false</span> <span class="built_in">type</span>=lvm</span><br></pre></td></tr></table></figure><p>删除本地存储</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ xe pbd-list                   // 查看要删除的设备 uuid</span><br><span class="line">$ xe pbd-unplug uuid=xxxxxx</span><br><span class="line">$ xe se-forget uuid=xxxx  // 这里的uuid 是 sr 的uuid</span><br></pre></td></tr></table></figure><p>添加开机启动项</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ xe vm-list 查看</span><br><span class="line">$ xe pool-param-set uuid=ccf30d4a-d37c-eaf3-0427-ac1eabae81c4 \</span><br><span class="line">other-config:auto_poweron=<span class="literal">true</span></span><br></pre></td></tr></table></figure><p>添加ios引导镜像目录(SR)</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">首先，登入console，执行以下指令，建立iso档型式的储存库(SR - Storage Repositories)</span><br><span class="line"></span><br><span class="line">$ mkdir /boot-iso</span><br><span class="line">$ xe sr-create name-label=boot-iso <span class="built_in">type</span>=iso \</span><br><span class="line">device-config:location=/boot-iso device-config:legacy_mode=<span class="literal">true</span> content-type=iso</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;创建新的本地存储&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;</summary>
      
    
    
    
    
    <category term="linux" scheme="http://example.com/tags/linux/"/>
    
  </entry>
  
  <entry>
    <title>diff 命令</title>
    <link href="http://example.com/2017/12/11/diff-%E5%91%BD%E4%BB%A4/"/>
    <id>http://example.com/2017/12/11/diff-%E5%91%BD%E4%BB%A4/</id>
    <published>2017-12-11T07:07:09.000Z</published>
    <updated>2021-02-07T03:43:10.409Z</updated>
    
    <content type="html"><![CDATA[<p>diff 命令用于逐行对比文件, 可以对比出两个或多个文件的不同之处</p><p>用法:<br>Usage: diff [OPTION]… FILES</p><p>diff 模式</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">-c          <span class="comment"># 上下文模式</span></span><br><span class="line">-u          <span class="comment"># 合并模式</span></span><br><span class="line">--normal    <span class="comment"># 标准模式, 默认模式</span></span><br></pre></td></tr></table></figure><p>比如有两个文件 hi.py 和 hi2.py, 但是 hi2.py 是复制 hi.py 并文件做了一些修改</p><p>hi.py</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sayhi</span>(<span class="params">name</span>):</span></span><br><span class="line">    print(<span class="string">&#x27;hi, %s&#x27;</span> % name)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">sayhi(<span class="string">&#x27;tom&#x27;</span>)</span><br></pre></td></tr></table></figure><p>hi2.py</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sayhi</span>(<span class="params">name</span>):</span></span><br><span class="line">    print(<span class="string">&#x27;hi, %s&#x27;</span> % name)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">sayhi(<span class="string">&#x27;jim&#x27;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>通过 <code>diff</code> 命令很容易对比出 hi2.py 修改了哪些地方</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">diff -u hi.py hi2.py <span class="comment"># -u 使用合并模式</span></span><br></pre></td></tr></table></figure><p>对比内容如下:</p><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">--- hi.py2017-12-11 15:14:56.000000000 +0800</span></span><br><span class="line"><span class="comment">+++ hi2.py2017-12-11 15:15:34.000000000 +0800</span></span><br><span class="line"><span class="meta">@@ -5,4 +5,4 @@</span></span><br><span class="line">     print(&#x27;hi, %s&#x27; % name)</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="deletion">-sayhi(&#x27;tom&#x27;)</span></span><br><span class="line"><span class="addition">+sayhi(&#x27;jim&#x27;)</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;diff 命令用于逐行对比文件, 可以对比出两个或多个文件的不同之处&lt;/p&gt;
&lt;p&gt;用法:&lt;br&gt;Usage: diff [OPTION]… FILES&lt;/p&gt;
&lt;p&gt;diff 模式&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr</summary>
      
    
    
    
    
    <category term="linux" scheme="http://example.com/tags/linux/"/>
    
  </entry>
  
  <entry>
    <title>Pyinstaller 打包与配置</title>
    <link href="http://example.com/2017/11/15/Pyinstaller-%E6%89%93%E5%8C%85%E4%B8%8E%E9%85%8D%E7%BD%AE/"/>
    <id>http://example.com/2017/11/15/Pyinstaller-%E6%89%93%E5%8C%85%E4%B8%8E%E9%85%8D%E7%BD%AE/</id>
    <published>2017-11-15T09:24:02.000Z</published>
    <updated>2021-02-07T03:43:10.408Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Pyinstaller"><a href="#Pyinstaller" class="headerlink" title="Pyinstaller"></a>Pyinstaller</h3><p>Pyinstaller 打包的程序需要添加数据文件时(要调用的子程序或者其他资源文件), 需要用以下代码获取<code>run-time</code>运行时环境</p><blockquote><p>例子, 动态获取运行时与运行前的资源以便调试程序时调用,</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> <span class="built_in">getattr</span>(sys, <span class="string">&#x27;frozen&#x27;</span>, <span class="literal">False</span>):</span><br><span class="line">    <span class="comment"># 如果是运行时, 那么 bundle_dir 为 run-time 路径</span></span><br><span class="line">    bundle_dir = sys._MEIPASS</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="comment"># 如果不是, 那么 bundle_dir 为文件当前目录路径</span></span><br><span class="line">    bundle_dir = os.path.dirname(os.path.abspath(__file__))</span><br><span class="line">print(bundle_dir)</span><br><span class="line">print(os.getcwd())</span><br></pre></td></tr></table></figure><p>可以看更详细的 <a href="https://pythonhosted.org/PyInstaller/runtime-information.html">文档说明</a></p><p>css 文件, 图片等资源可以在 <code>.spec</code> 文件中编辑 Analysis 下的 datas 元素</p><ul><li>第一个参数是文件名(可以使用 <code>glob</code> 模块支持的通配符)</li><li>第二个参数是 <code>run-time</code>(运行时) 文件名或路径</li></ul><blockquote><p>这个例子会把 <code>*.png</code> 文件在程序运行时放置 <code>run-time path</code> 的 <code>static/imgs</code> 目录下</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">a = Analysis([<span class="string">&#x27;window.py&#x27;</span>],</span><br><span class="line">    datas=[(<span class="string">&#x27;*.png&#x27;</span>, <span class="string">&#x27;static/imgs&#x27;</span>)],</span><br></pre></td></tr></table></figure><h3 id="搭配-PyQt5"><a href="#搭配-PyQt5" class="headerlink" title="搭配 PyQt5"></a>搭配 PyQt5</h3><ul><li><p>PyQt5 使用 pyinstaller 打包时如果图标格式必须是 <code>.icns</code></p></li><li><p>适配 MAC Retina 屏幕需要在 <code>.spec</code> 文件添加下面的 info.plist 参数</p></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">app = BUNDLE(exe,</span><br><span class="line">        name=<span class="string">&#x27;ytools.app&#x27;</span>,</span><br><span class="line">        icon=<span class="string">&#x27;tools.icns&#x27;</span>,</span><br><span class="line">        bundle_identifier=<span class="literal">None</span>,</span><br><span class="line">        info_plist=&#123;</span><br><span class="line">        <span class="string">&#x27;NSHighResolutionCapable&#x27;</span>: <span class="string">&#x27;True&#x27;</span> <span class="comment"># 这一行</span></span><br><span class="line">    &#125;,</span><br><span class="line">)</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;Pyinstaller&quot;&gt;&lt;a href=&quot;#Pyinstaller&quot; class=&quot;headerlink&quot; title=&quot;Pyinstaller&quot;&gt;&lt;/a&gt;Pyinstaller&lt;/h3&gt;&lt;p&gt;Pyinstaller 打包的程序需要添加数据文件时(要调用的子程序</summary>
      
    
    
    
    
    <category term="python" scheme="http://example.com/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>HTML页面懒加载</title>
    <link href="http://example.com/2017/11/01/html%E9%A1%B5%E9%9D%A2%E6%87%92%E5%8A%A0%E8%BD%BD/"/>
    <id>http://example.com/2017/11/01/html%E9%A1%B5%E9%9D%A2%E6%87%92%E5%8A%A0%E8%BD%BD/</id>
    <published>2017-11-01T08:28:10.000Z</published>
    <updated>2021-02-07T03:43:10.409Z</updated>
    
    <content type="html"><![CDATA[<p>通常页面图片或者其他文件还有很多的时候一次性全部加载出来是很占用请求带宽的, 如果网络比较慢或者图片文件比较大(高清图片)会影响页面的加载完毕时间, 体验会很差.</p><p>页面懒加载(lazyload)是指页面图片或者其他文件还有很多的时候, 等这个图片即将展现在浏览器窗口可视范围内时在加载这个图片.</p><p>发现了一个很方便的懒加载js库 <code>lazyload</code></p><blockquote><p>安装</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install lazyload</span><br></pre></td></tr></table></figure><blockquote><p>使用方法</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">     <span class="comment">&lt;!-- 这里设置过大的宽高是为了模拟比较大的图片, class=&quot;lazyload&quot; 才能使用 lazyload 的功能, lazyload 会取 data-src 的值,加载后替换为 src 的值 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">img</span> <span class="attr">class</span>=<span class="string">&quot;lazyload&quot;</span> <span class="attr">data-src</span>=<span class="string">&quot;1.jpg&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;&quot;</span> <span class="attr">width</span>=<span class="string">&quot;1000&quot;</span> <span class="attr">height</span>=<span class="string">&quot;800&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">img</span> <span class="attr">class</span>=<span class="string">&quot;lazyload&quot;</span> <span class="attr">data-src</span>=<span class="string">&quot;2.jpg&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;&quot;</span> <span class="attr">width</span>=<span class="string">&quot;1000&quot;</span> <span class="attr">height</span>=<span class="string">&quot;800&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">img</span> <span class="attr">class</span>=<span class="string">&quot;lazyload&quot;</span> <span class="attr">data-src</span>=<span class="string">&quot;3.jpg&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;&quot;</span> <span class="attr">width</span>=<span class="string">&quot;1000&quot;</span> <span class="attr">height</span>=<span class="string">&quot;800&quot;</span>&gt;</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">&lt;!-- 引入 lazyload --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;node_modules/lazyload/lazyload.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">            lazyload(); <span class="comment">// 调用lazyload</span></span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;通常页面图片或者其他文件还有很多的时候一次性全部加载出来是很占用请求带宽的, 如果网络比较慢或者图片文件比较大(高清图片)会影响页面的加载完毕时间, 体验会很差.&lt;/p&gt;
&lt;p&gt;页面懒加载(lazyload)是指页面图片或者其他文件还有很多的时候, 等这个图片即将展现在浏览</summary>
      
    
    
    
    
    <category term="前端" scheme="http://example.com/tags/%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>Git 常用命令速查表</title>
    <link href="http://example.com/2017/10/27/Git-%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4%E9%80%9F%E6%9F%A5%E8%A1%A8/"/>
    <id>http://example.com/2017/10/27/Git-%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4%E9%80%9F%E6%9F%A5%E8%A1%A8/</id>
    <published>2017-10-27T06:51:19.000Z</published>
    <updated>2021-02-07T03:43:10.408Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/git.jpg"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;img src=&quot;/git.jpg&quot;&gt;&lt;/p&gt;
</summary>
      
    
    
    
    
    <category term="git" scheme="http://example.com/tags/git/"/>
    
  </entry>
  
  <entry>
    <title>快速重新配置linux虚拟机网络更变</title>
    <link href="http://example.com/2017/10/27/%E5%BF%AB%E9%80%9F%E9%87%8D%E6%96%B0%E9%85%8D%E7%BD%AElinux-%E8%99%9A%E6%8B%9F%E6%9C%BA%E7%BD%91%E7%BB%9C%E6%9B%B4%E5%8F%98/"/>
    <id>http://example.com/2017/10/27/%E5%BF%AB%E9%80%9F%E9%87%8D%E6%96%B0%E9%85%8D%E7%BD%AElinux-%E8%99%9A%E6%8B%9F%E6%9C%BA%E7%BD%91%E7%BB%9C%E6%9B%B4%E5%8F%98/</id>
    <published>2017-10-27T03:32:17.000Z</published>
    <updated>2021-02-07T03:43:10.410Z</updated>
    
    <content type="html"><![CDATA[<p>重复的做一件事总是容易让人感到厌倦, 之前很恐惧把虚拟机克隆之后重新配置网络, 因为mac地址也换了需要修改 <code>ifcfg-ethN</code> 文件, 经过这次又有很多机器改地址我想到了个算是比较快的方法:</p><ul><li>例如更改 eth0 -&gt; eth1</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /etc/sysconfig/network-scripts/</span><br><span class="line">mv ifcfg-eth0 ifcfg-eth1</span><br><span class="line">grep <span class="string">&#x27;eth1&#x27;</span> /etc/udev/rules.d/70-persistent-net.rules &gt;&gt; ifcfg-eth1</span><br><span class="line">vim ifcfg-eth1 <span class="comment"># 编辑文件更改 mac/ip</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;重复的做一件事总是容易让人感到厌倦, 之前很恐惧把虚拟机克隆之后重新配置网络, 因为mac地址也换了需要修改 &lt;code&gt;ifcfg-ethN&lt;/code&gt; 文件, 经过这次又有很多机器改地址我想到了个算是比较快的方法:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;例如更改 eth0 -&amp;g</summary>
      
    
    
    
    
    <category term="linux" scheme="http://example.com/tags/linux/"/>
    
  </entry>
  
</feed>
